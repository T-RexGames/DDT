<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_snowman_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the spawn origin
mySpawnLocation_x = x;
mySpawnLocation_y = y;
returningToSpawn = false;

//Set other variables here.
depth = y;
myInitalSpeed = irandom_range(3,6);

switch (myInitalSpeed){
    case 3:
        myXScaleModifer = .7;
        myYScaleModifer = .7; 
        break;
    case 4:
        myXScaleModifer = .8;
        myYScaleModifer = .8;
        break;
    case 5:
        myXScaleModifer = 1;
        myYScaleModifer = 1;
        break;
    case 6:
        myXScaleModifer = 1.2;
        myYScaleModifer = 1.2;
        break;
}


image_xscale = 1 * myXScaleModifer ;
image_yscale = 1 * myYScaleModifer;

mySpeed = myInitalSpeed ;
hitByPuck = false;
path = path_add();
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Done running from the moose.
returningToSpawn = false;
image_xscale = 1 * myXScaleModifer ;
image_yscale = 1 * myYScaleModifer;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move towards the player and make visible again

image_alpha = 1;

if (!returningToSpawn ){
    if(distance_to_object(obj_Player) &lt; view_hview[0] + 20){
       ///get path to player 
        if(instance_exists(obj_Player)){
            var xx = (obj_Player.x div CELL_WIDTH)*CELL_WIDTH+CELL_WIDTH/2;
            var yy = (obj_Player.y div CELL_HEIGHT)*CELL_HEIGHT+CELL_HEIGHT/2;

            if (hitByPuck){ 
               // path_delete(path);
                if(mp_grid_path(Level.grid_path, path, mySpawnLocation_x , mySpawnLocation_y, xx, yy, true)) {
                    path_start(path, mySpeed, path_action_stop, false);
                    }
                hitByPuck = false;
            } else {
                if(mp_grid_path(Level.grid_path, path, x, y, xx, yy, true)) {
                    path_start(path, mySpeed, path_action_stop, false);
                    }
            }
        }
    }
}

if (!hitByPuck){
    alarm[0] = room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update the depth
depth = -y;


if(direction == 180){
sprite_index = spr_snowman_left;
}
else if(direction == 0){
sprite_index = spr_snowman_right;
}
else if(direction == 90){
sprite_index = spr_snowman_up;
}
else if(direction == 270){
sprite_index = spr_snowman_down;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_moose">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//return to SnowMan's origin

sprite_index = spr_snowmanLoosingHead;

instance_create(x,y, obj_snowman_impact);

if(mp_grid_path(Level.grid_path, path, x, y, mySpawnLocation_x, mySpawnLocation_y, true)) {
    image_xscale = .5;
    image_yscale = .5;
    returningToSpawn = true;
    path_start(path, 5, path_action_stop, false);
    alarm[1] = room_speed * 4 ;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_puck">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get path to origin and show hit animation.

instance_create(x,y, obj_snowman_impact);

hitByPuck = true;
path_end();
x = mySpawnLocation_x;
y = mySpawnLocation_y;
image_alpha = 0;

//mySpeed = 1;
alarm[0] = 80;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy the path
if (path_exists(path)) {
path_delete(path);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
